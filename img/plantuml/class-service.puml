@startuml

scale max 1024 width
scale max 1100 height

set separator none

left to right direction

package org.springframework.data.jpa.repository  {
  interface JpaRepository
}

package eventsourcing.postgresql #DDDDDD {

  package eventsourcing.postgresql.repository {

    class AggregateRepository {
      +createAggregateIfAbsent(String, UUID)
      +checkAndUpdateAggregateVersion(UUID, int, int): boolean
      +createAggregateSnapshot(Aggregate): void
      +readAggregateSnapshot(UUID, Integer): Optional<Aggregate>
    }

    class EventRepository {
      +appendEvent(Event): EventWithId
      +readEvents(UUID, Integer, Integer): List<EventWithId>
      +readEventsAfterCheckpoint(String, BigInteger, long): List<EventWithId>
    }

    class EventSubscriptionRepository {
      +createSubscriptionIfAbsent(String): void
      +readCheckpointAndLockSubscription(String): Optional<EventSubscriptionCheckpoint>
      +updateEventSubscription(String, BigInteger, long): boolean
    }
  }

  package eventsourcing.postgresql.service {

    class AggregateStore {
      -aggregateRepository: AggregateRepository
      -eventRepository: EventRepository
      +saveAggregate(Aggregate): List<EventWithId>
      +readAggregate(String, UUID): Aggregate
      +readAggregate(String, UUID, Integer): Aggregate
    }

    together {
      class CommandProcessor {
        -aggregateStore: AggregateStore
        -commandHandlers: List<CommandHandler>
        -defaultCommandHandler: DefaultCommandHandler
        -aggregateChangesHandlers: List<SyncEventHandler>
        +process(Command): Aggregate
      }

      class EventSubscriptionProcessor {
        -subscriptionRepository: EventSubscriptionRepository
        -eventRepository: EventRepository
        +processNewEvents(AsyncEventHandler): void
      }
    }

    together {
      class ScheduledEventSubscriptionProcessor {
        -eventHandlers: List<AsyncEventHandler>
        -eventSubscriptionProcessor: EventSubscriptionProcessor
        +processNewEvents(): void
        -processNewEvents(AsyncEventHandler): void
      }

      class PostgresChannelEventSubscriptionProcessor {
        -eventHandlers: List<AsyncEventHandler>
        -eventSubscriptionProcessor: EventSubscriptionProcessor
        -dataSourceProperties: DataSourceProperties
        -executor: ExecutorService
        -latch: CountDownLatch
        -future: Future
        -connection: PgConnection
        -{static} newExecutor(): ExecutorService
        +start(): void
        -processNewEvents(AsyncEventHandler): void
        -getPgConnection(): PgConnection
        -isActive(): boolean
        +stop(): void
      }
    }

    package eventsourcing.postgresql.service.command {

      interface CommandHandler {
        handle(Aggregate, Command): void
        getCommandType(): Class
      }

      class DefaultCommandHandler
    }

    package eventsourcing.postgresql.service.event {

      interface SyncEventHandler {
        handleEvents(List<EventWithId>, Aggregate): void
        getAggregateType(): String
      }

      interface AsyncEventHandler {
        handleEvent(EventWithId): void
        getAggregateType(): String
        getSubscriptionName(): String
      }
    }
  }
}

package com.example.eventsourcing {

  package com.example.eventsourcing.repository {

    interface OrderProjectionRepository
  }

  package com.example.eventsourcing.service {

    package com.example.eventsourcing.service.command {

      class PlaceOrderCommandHandler
    }

    package com.example.eventsourcing.service.event {

      class OrderProjectionUpdater {
        -repository: OrderProjectionRepository
        -mapper: OrderMapper
        -updateOrderProjection(OrderAggregate): void
      }

      class OrderIntegrationEventSender {
        -aggregateStore: AggregateStore
        -orderMapper: OrderMapper
        -sendDataToKafka(OrderDto): void
      }
    }
  }

  package com.example.eventsourcing.mapper {

    interface OrderMapper {
      toProjection(OrderAggregate): OrderProjection
      toDto(Event, OrderAggregate): OrderDto
    }

    class OrderMapperImpl << Generated >>
  }

  package com.example.eventsourcing.service.controller {

    class OrdersController {
      -commandProcessor: CommandProcessor
      -orderProjectionRepository: OrderProjectionRepository
      +placeOrder(JsonNode): ResponseEntity<JsonNode>
      +modifyOrder(UUID, JsonNode): ResponseEntity<Object>
      +getOrders(): ResponseEntity<List<OrderProjection>>
      +getOrder(UUID): ResponseEntity<OrderProjection>
    }
  }
}

JpaRepository <|-right- OrderProjectionRepository

SyncEventHandler <|.. OrderProjectionUpdater

AsyncEventHandler <|.. OrderIntegrationEventSender

CommandHandler <|.left. DefaultCommandHandler
CommandHandler <|.. PlaceOrderCommandHandler

OrderMapper <|.left. OrderMapperImpl

OrdersController o-- CommandProcessor
OrdersController o-- OrderProjectionRepository

AggregateStore o-- AggregateRepository
AggregateStore o-- EventRepository

EventSubscriptionProcessor o-- EventSubscriptionRepository
EventSubscriptionProcessor o-- EventRepository

ScheduledEventSubscriptionProcessor o-- EventSubscriptionProcessor
ScheduledEventSubscriptionProcessor o-- AsyncEventHandler

PostgresChannelEventSubscriptionProcessor o-- EventSubscriptionProcessor
PostgresChannelEventSubscriptionProcessor o-- AsyncEventHandler

CommandProcessor o-- AggregateStore
CommandProcessor o-- CommandHandler
CommandProcessor o-- DefaultCommandHandler
CommandProcessor o-- SyncEventHandler

OrderProjectionUpdater o-- OrderProjectionRepository
OrderProjectionUpdater o-- OrderMapper

OrderIntegrationEventSender o-- AggregateStore
OrderIntegrationEventSender o-- OrderMapper

@enduml
